!function(e){function t(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var i={};t.m=e,t.c=i,t.i=function(e){return e},t.d=function(e,i,n){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=9)}([function(e,t,i){"use strict";e.exports={forElement:function(e,t,i){e&&e.addEventListener(t,i)}}},function(e,t,i){"use strict";e.exports={data:[{placeholder:"email",regex:"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",error:"Must be a valid email"},{placeholder:"password",regex:"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$",error:"Must have upper, lower case & number"}]}},function(e,t,i){"use strict";var n=i(1),o=function(e){return e&&e.__esModule?e:{default:e}}(n);e.exports={init:function(e){e.map(function(e,t){e&&(e.placeholder=o.default.data[t].placeholder)},this)},toggle:function(e){e.map(function(e,t){e.nextSibling;event.target!=e?e.placeholder=o.default.data[t].placeholder:e.placeholder=""},this)}}},function(e,t,i){"use strict";var n=i(1),o=function(e){return e&&e.__esModule?e:{default:e}}(n);e.exports={liveValidation:function(e){e.map(function(e,t){var i=e.nextSibling;if(""===e.value)return void event.preventDefault();e.value.match(o.default.data[t].regex)?(e.parentNode.classList.add("flex"),this.failEmail?i.textContent="":i.textContent="âˆš",i.classList.remove("input-fail"),i.classList.add("input-success")):(event.preventDefault(),e.parentNode.classList.remove("flex"),i.textContent=o.default.data[t].error,i.classList.remove("input-success"),i.classList.add("input-fail"))},this)}}},function(e,t,i){"use strict";i(5),i(6),i(7),i(8)},function(e,t,i){"use strict";({init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.deleteFlutterPost=document.querySelectorAll(".delete-flutter")},bindEvents:function(){for(var e=0;e<this.deleteFlutterPost.length;e++)this.deleteFlutterPost[e].addEventListener("click",this.deletePost.bind(this))},deletePost:function(e){e.target.closest(".post").remove()}}).init()},function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var o=i(0),l=n(o),s=i(2),r=n(s),a=i(3),c=n(a);({init:function(){this.cacheDOM(),this.bindEvents(),r.default.init(this.requiredSignIn)},cacheDOM:function(){this.closeBtn=document.querySelector(".close-btn"),this.formSignIn=document.querySelector(".form-sign-in"),this.failEmail=document.querySelector(".input-fail-email");var e=document.querySelector(".email-sign-in"),t=document.querySelector(".password-sign-in");this.requiredSignIn=[e,t]},bindEvents:function(){l.default.forElement(this.formSignIn,"click",this.liveValidation.bind(this)),l.default.forElement(this.formSignIn,"click",this.placeholdersToggle.bind(this))},liveValidation:function(){c.default.liveValidation(this.requiredSignIn)},placeholdersToggle:function(){r.default.toggle(this.requiredSignIn)}}).init()},function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var o=i(0),l=n(o),s=i(2),r=n(s),a=i(3),c=n(a);({init:function(){this.cacheDOM(),this.bindEvents(),r.default.init(this.requiredSignUp)},cacheDOM:function(){this.closeBtn=document.querySelector(".close-btn"),this.formSignUp=document.querySelector(".form-sign-up"),this.failEmail=document.querySelector(".input-fail-email");var e=document.querySelector(".email-sign-up"),t=document.querySelector(".password-sign-up");this.requiredSignUp=[e,t]},bindEvents:function(){l.default.forElement(this.formSignUp,"click",this.liveValidation.bind(this)),l.default.forElement(this.formSignUp,"click",this.placeholdersToggle.bind(this))},liveValidation:function(){c.default.liveValidation(this.requiredSignUp)},placeholdersToggle:function(){r.default.toggle(this.requiredSignUp)}}).init()},function(e,t,i){"use strict";var n=i(0),o=function(e){return e&&e.__esModule?e:{default:e}}(n);({init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.modal=document.querySelector(".modal"),this.showModal=document.querySelector(".show-modal"),this.closeBtn=document.querySelector(".close-btn"),this.fadeIn=document.querySelector(".fade-in")},bindEvents:function(){o.default.forElement(this.showModal,"click",this.handleToggleModal.bind(this)),o.default.forElement(this.closeBtn,"click",this.handleToggleModal.bind(this))},consoleLog:function(){console.log("hi")},handleToggleModal:function(){this.modal.classList.contains("hidden")?(this.modal.classList.remove("hidden"),this.modal.classList.add("fade-in")):(this.modal.classList.remove("fade-in"),this.modal.classList.add("hidden"))}}).init()},function(e,t,i){e.exports=i(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,